// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relationships
  users     User[]

  @@index([name])
  @@map("user_type")
}

model User {
  id        Int      @id @default(autoincrement())
  userTypeId Int
  username  String   @unique @db.VarChar(25)
  name      String   @db.VarChar(50)
  lastName String    @db.VarChar(50)
  secondLastName String? @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  password  String  @db.VarChar(72) // 72 es lo recomendado para bcrypt
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userType   UserType @relation(fields: [userTypeId], references: [id])
  processes Process[]
  categories Category[]
  processCategories ProcessCategory[]
  processCategoryLogs ProcessCategoryLog[]

  @@index([name])
  @@index([email])
  @@index([userTypeId])
  @@map("user")
}

model Process {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String   @unique @db.VarChar(100)
  description String @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  processCategories ProcessCategory[]

  @@index([name])
  @@map("process")
}

model Category {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String   @unique @db.VarChar(100)
  description String @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  processCategories ProcessCategory[]

  @@index([name])
  @@map("category")
}

model ProcessCategory {
  id          Int      @id @default(autoincrement())
  processId   Int
  categoryId  Int
  userId      Int
  response    String @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //Relationships
  user        User     @relation(fields: [userId], references: [id])
  process     Process  @relation(fields: [processId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  processCategoryLogs ProcessCategoryLog[]

  @@unique([processId, categoryId])
  @@index([processId])
  @@index([categoryId])
  @@map("faq")
}

model ProcessCategoryLog {
  id          Int      @id @default(autoincrement())
  processCategoryId Int
  userId      Int?
  actionTypeId Int
  createdAt   DateTime @default(now())

  // Relationships
  processCategory ProcessCategory @relation(fields: [processCategoryId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  actionType  ActionType   @relation(fields: [actionTypeId], references: [id])

  @@index([processCategoryId])
  @@index([userId])
  @@map("faq_log")
}

model ActionType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relationships
  processCategoryLogs ProcessCategoryLog[]

  @@index([name])
  @@map("action_type")
}