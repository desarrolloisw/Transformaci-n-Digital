generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/**
 * UserType model
 * Represents the type or role of a user in the system.
 */
model UserType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  /**
   * Users associated with this user type.
   */
  users     User[]

  @@index([name])
  @@map("user_type")
}

/**
 * User model
 * Stores user account information and profile details.
 */
model User {
  id        Int      @id @default(autoincrement())
  userTypeId Int
  username  String   @unique @db.VarChar(25)
  name      String   @db.VarChar(50)
  lastName String    @db.VarChar(50)
  secondLastName String? @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  password  String  @db.VarChar(72) // 72 is recommended for bcrypt
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /**
   * User type reference.
   */
  userType   UserType @relation(fields: [userTypeId], references: [id])
  /**
   * Processes created by the user.
   */
  processes Process[]
  /**
   * Categories created by the user.
   */
  categories Category[]
  /**
   * ProcessCategory records associated with the user.
   */
  processCategories ProcessCategory[]
  /**
   * ProcessCategoryLog records associated with the user.
   */
  processCategoryLogs ProcessCategoryLog[]

  @@index([name])
  @@index([email])
  @@index([userTypeId])
  @@map("user")
}

/**
 * Process model
 * Represents a process created by a user.
 */
model Process {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String   @unique @db.VarChar(100)
  description String @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /**
   * User who created the process.
   */
  user      User     @relation(fields: [userId], references: [id])
  /**
   * Categories associated with the process.
   */
  processCategories ProcessCategory[]

  @@index([name])
  @@map("process")
}

/**
 * Category model
 * Represents a category created by a user.
 */
model Category {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String   @unique @db.VarChar(100)
  description String @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /**
   * User who created the category.
   */
  user      User     @relation(fields: [userId], references: [id])
  /**
   * ProcessCategory records associated with the category.
   */
  processCategories ProcessCategory[]

  @@index([name])
  @@map("category")
}

/**
 * ProcessCategory model
 * Represents the relationship between a process and a category, including user response.
 */
model ProcessCategory {
  id          Int      @id @default(autoincrement())
  processId   Int
  categoryId  Int
  userId      Int
  response    String @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  /**
   * User who created the record.
   */
  user        User     @relation(fields: [userId], references: [id])
  /**
   * Associated process.
   */
  process     Process  @relation(fields: [processId], references: [id])
  /**
   * Associated category.
   */
  category    Category @relation(fields: [categoryId], references: [id])
  /**
   * Logs for this process-category relationship.
   */
  processCategoryLogs ProcessCategoryLog[]

  @@unique([processId, categoryId])
  @@index([processId])
  @@index([categoryId])
  @@map("faq")
}

/**
 * ProcessCategoryLog model
 * Stores logs of actions performed on ProcessCategory records.
 */
model ProcessCategoryLog {
  id          Int      @id @default(autoincrement())
  processCategoryId Int
  userId      Int?
  actionTypeId Int
  createdAt   DateTime @default(now())

  /**
   * Associated ProcessCategory record.
   */
  processCategory ProcessCategory @relation(fields: [processCategoryId], references: [id])
  /**
   * User who performed the action (optional).
   */
  user        User?    @relation(fields: [userId], references: [id])
  /**
   * Type of action performed.
   */
  actionType  ActionType   @relation(fields: [actionTypeId], references: [id])

  @@index([processCategoryId])
  @@index([userId])
  @@map("faq_log")
}

/**
 * ActionType model
 * Represents the type of action that can be logged in ProcessCategoryLog.
 */
model ActionType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  /**
   * Logs associated with this action type.
   */
  processCategoryLogs ProcessCategoryLog[]

  @@index([name])
  @@map("action_type")
}